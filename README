# Holophrasm: a purely neural automated theorem prover for Metamath

Holophrasm is an automated theorem prover for the Metamath formal
mathematics verification system that uses deep learning.
It was originally developed by Daniel Whalen.

For technical details, see:
"Holophrasm: a purely neural automated theorem prover for higher-order logic"
by Daniel Whalen, 10 Aug 2016, https://arxiv.org/abs/1608.02644

This version was modified by David A. Wheeler.

## Installation

To use the program, start by downloading the release, which includes the binary files for the language model and the trained model weights.

First, install system packages.  This must include Python2 (if not already installed), including its "development" packages (typically called python2-dev or python2-devel, though it might say "python" instead of "python2").  You must also install a working C compiler such as gcc (this should automatically happen when you install the python-dev/python-devel package).

If you're using Cygwin, you need to separately install pip (the Python2 package manager) by running:

~~~~
python2 -m ensurepip
pip2 install --upgrade pip
~~~~

Now install the Python language dependencies:

~~~~
pip2 install numpy
~~~~

## Usage

Then, from the root directory, using python 2.7, run

~~~~
python2 run_script_ordered.py
python2 write_all_proofs.py
~~~~

run_script_ordered.py will attempt to search for proofs for all the Metamath propositions in the test set, starting with the (expected) easiest proofs first.  Reasonable parameters for running the script are:
timeout: 5
num_passes: 10000
search beam width: 20
hyp bonus: 0 
Proofs are saved to searcher/proofs as soon as they are found.  The proofs that I found during my search are in searcher/proofs_baseline.

write_all_proofs.py will generate a modified_set.mm module file, which consists of the proofs from set.mm, with the found proofs replaced.  This can then be fed into Metamath and verified using the commands

~~~~
READ modified_set.mm
VERIFY PROOF *
~~~~

There's a known bug involving outputting the proofs that assigns the same additional dummy variable to multiple set variables, breaking the disjointness condition.
I think this is purely a problem with the proof writing, but I'm not confident, so I've excluded these proofs from my count of working proofs anyway.

## Training

If you want to train from scratch, you can do the following.  I recommend having at least 64GB of RAM.

Step 0: (OS X only) deal with Accelerate and forking bug
#########
export VECLIB_MAXIMUM_THREADS=1
#########

Step 1: train gen and pred
#########
python script_gen.py
python script_pred.py
#########

Step 2: set up the files for the nn interface
#########
mkdir searcher
cp weights/gen/train.parameters searcher/gen.parameters
cp weights/gen/train.weights searcher/gen.weights
cp weights/pred/train.parameters searcher/pred.parameters
cp weights/pred/train.weights searcher/pred.weights
#########
NOTE: this will fail because the searcher currently expects payout to
already exist.  Fix that.

Step 3: save a copy of the language model somewhere by running
#########
python save_language_model.py
#########

Step 4: construct the payout data set and train the payout network
#########
python generate_payout_data_script.py
python script_payout.py
cp weights/pred/train.parameters searcher/payout.parameters
cp weights/pred/train.weights searcher/payout.weights
#########

Step 5: run the proof search (hyp bonus should be set to 0.0 for consistency with the paper)
#########
python run_script_ordered.py
#########

Step 6: verify the proofs
######### PYTHON CODE
import write_proof
write_proof.reset()
write_proof.write_all_known_proofs()
#########

Step 7: copy the modified_set.mm into the metamath folder and use the following commands to verify the proofs
######### METAMATH COMMANDS
ERASE
READ modified_set.mm
VERIFY PROOF *
#########
